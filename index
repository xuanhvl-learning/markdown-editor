<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Markdown Pro Editor</title>

  <!-- Markdown Parser -->
  <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
  <!-- Math (KaTeX) -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.css"/>
  <script defer src="https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/katex.min.js"></script>
  <script defer src="https://cdn.jsdelivr.net/npm/katex@0.16.9/dist/contrib/auto-render.min.js"></script>
  <!-- PDF Export -->
  <script src="https://cdn.jsdelivr.net/npm/html2pdf.js@0.10.1/dist/html2pdf.min.js"></script>
  <!-- Tiptap Editor (v2) -->
  <script type="module">
    import { Editor } from 'https://cdn.jsdelivr.net/npm/@tiptap/core@2.0.0/dist/tiptap.esm.js';
    import StarterKit from 'https://cdn.jsdelivr.net/npm/@tiptap/starter-kit@2.0.0/dist/index.esm.js';
    import { Table, TableRow, TableHeader, TableCell } from 'https://cdn.jsdelivr.net/npm/@tiptap/extension-table@2.0.0/dist/index.esm.js';
    import { MathInline, MathBlock } from 'https://cdn.jsdelivr.net/npm/@tiptap/extension-math@0.2.0/dist/index.esm.js';
    import { Placeholder } from 'https://cdn.jsdelivr.net/npm/@tiptap/extension-placeholder@2.0.0/dist/index.esm.js';

    window.tiptap = { Editor, StarterKit, Table, TableRow, TableHeader, TableCell, MathInline, MathBlock, Placeholder };
  </script>

  <style>
    * { margin: 0; padding: 0; box-sizing: border-box; }
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background: #f0f2f5;
      color: #1a1a1a;
      padding: 20px;
    }
    .container {
      max-width: 960px;
      margin: 0 auto;
      background: white;
      border-radius: 16px;
      box-shadow: 0 8px 30px rgba(0,0,0,0.1);
      overflow: hidden;
    }
    .header {
      background: #1e293b;
      color: white;
      padding: 16px 24px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    .header h1 { font-size: 1.5rem; font-weight: 600; }
    .controls button {
      margin-left: 8px;
      padding: 9px 16px;
      border: none;
      border-radius: 8px;
      background: #3b82f6;
      color: white;
      cursor: pointer;
      font-size: 0.9rem;
      transition: 0.2s;
    }
    .controls button:hover { background: #2563eb; }
    .controls button:disabled { background: #94a3b8; cursor: not-allowed; }

    .drop-zone {
      border: 3px dashed #cbd5e1;
      border-radius: 12px;
      padding: 70px 20px;
      text-align: center;
      margin: 24px;
      background: #f8fafc;
      transition: all 0.3s;
    }
    .drop-zone.dragover {
      border-color: #3b82f6;
      background: #dbeafe;
    }
    .drop-zone h3 { margin-bottom: 12px; color: #1e293b; }
    .drop-zone p { color: #64748b; }

    .content {
      padding: 24px;
      min-height: 500px;
      line-height: 1.8;
    }
    #viewer img { max-width: 100%; border-radius: 8px; margin: 12px 0; }
    #viewer table {
      border-collapse: collapse;
      width: 100%;
      margin: 16px 0;
    }
    #viewer th, #viewer td {
      border: 1px solid #e2e8f0;
      padding: 10px;
      text-align: left;
    }
    #viewer th { background: #f1f5f9; }

    .editor-toolbar {
      display: flex;
      flex-wrap: wrap;
      gap: 6px;
      padding: 12px;
      background: #f8fafc;
      border-bottom: 1px solid #e2e8f0;
    }
    .editor-toolbar button {
      padding: 8px 12px;
      background: white;
      border: 1px solid #cbd5e1;
      border-radius: 6px;
      cursor: pointer;
      font-size: 0.9rem;
    }
    .editor-toolbar button.active {
      background: #3b82f6;
      color: white;
      border-color: #3b82f6;
    }

    #editor-container {
      padding: 16px;
      border: 1px solid #e2e8f0;
      border-radius: 8px;
      min-height: 400px;
      background: white;
      font-size: 1rem;
    }

    .hidden { display: none; }

    .math-inline, .math-block {
      background: #fef3c7;
      padding: 2px 6px;
      border-radius: 4px;
      font-family: 'KaTeX_Main', serif;
    }
  </style>
</head>
<body>

<div class="container">
  <div class="header">
    <h1>Markdown Pro Editor</h1>
    <div class="controls">
      <button id="editBtn">Edit</button>
      <button id="saveBtn" class="hidden">Save .md</button>
      <button id="exportPdfBtn">Export PDF</button>
      <button id="backBtn" class="hidden">Xem tr∆∞·ªõc</button>
    </div>
  </div>

  <div id="dropZone" class="drop-zone">
    <h3>K√©o & th·∫£ file .md v√†o ƒë√¢y</h3>
    <p>ho·∫∑c</p>
    <input type="file" id="fileInput" accept=".md" style="margin-top:12px;"/>
  </div>

  <div id="content" class="content hidden">
    <div id="viewer"></div>
  </div>
</div>

<!-- Editor -->
<div id="editorModal" class="hidden" style="padding:20px;">
  <div class="editor-toolbar">
    <button data-cmd="undo" title="Undo">‚Ü∂</button>
    <button data-cmd="redo" title="Redo">‚Ü∑</button>
    <button data-cmd="bold">ùêÅ</button>
    <button data-cmd="italic">ùêº</button>
    <button data-cmd="h1">H1</button>
    <button data-cmd="h2">H2</button>
    <button data-cmd="bullet">‚Ä¢ List</button>
    <button data-cmd="ordered">1. List</button>
    <button data-cmd="code">{} Code</button>
    <button data-cmd="table">Table</button>
    <button data-cmd="math-inline">f(x)</button>
    <button data-cmd="math-block">‚àë</button>
    <button data-cmd="link">Link</button>
    <button data-cmd="image">Image</button>
  </div>
  <div id="editor-container"></div>
</div>

<script type="module">
  import { tiptap } from './tiptap.js';

  const { Editor, StarterKit, Table, TableRow, TableHeader, TableCell, MathInline, MathBlock, Placeholder } = tiptap;

  const dropZone = document.getElementById('dropZone');
  const fileInput = document.getElementById('fileInput');
  const viewer = document.getElementById('viewer');
  const content = document.getElementById('content');
  const editBtn = document.getElementById('editBtn');
  const saveBtn = document.getElementById('saveBtn');
  const exportPdfBtn = document.getElementById('exportPdfBtn');
  const backBtn = document.getElementById('backBtn');
  const editorModal = document.getElementById('editorModal');

  let currentMarkdown = '';
  let editor = null;

  // === K√©o th·∫£ ===
  ['dragover', 'dragenter'].forEach(e => dropZone.addEventListener(e, ev => {
    ev.preventDefault(); dropZone.classList.add('dragover');
  }));
  ['dragleave', 'dragend', 'drop'].forEach(e => dropZone.addEventListener(e, ev => {
    ev.preventDefault(); dropZone.classList.remove('dragover');
  }));
  dropZone.addEventListener('drop', e => {
    const file = e.dataTransfer.files[0];
    if (file && file.name.endsWith('.md')) readFile(file);
  });
  fileInput.addEventListener('change', () => {
    const file = fileInput.files[0];
    if (file) readFile(file);
  });

  function readFile(file) {
    const reader = new FileReader();
    reader.onload = e => {
      currentMarkdown = e.target.result;
      renderMarkdown();
      dropZone.classList.add('hidden');
      content.classList.remove('hidden');
      saveBtn.classList.add('hidden');
      backBtn.classList.add('hidden');
      editBtn.classList.remove('hidden');
      exportPdfBtn.classList.remove('hidden');
    };
    reader.readAsText(file);
  }

  function renderMarkdown() {
    const html = marked.parse(currentMarkdown);
    viewer.innerHTML = html;
    renderMathInElement(viewer, {
      delimiters: [
        {left: "$$", right: "$$", display: true},
        {left: "$", right: "$", display: false},
        {left: "\\(", right: "\\)", display: false},
        {left: "\\[", right: "\\]", display: true}
      ]
    });
  }

  // === Editor ===
  editBtn.addEventListener('click', () => {
    content.classList.add('hidden');
    editorModal.classList.remove('hidden');
    editBtn.classList.add('hidden');
    saveBtn.classList.remove('hidden');
    backBtn.classList.remove('hidden');
    exportPdfBtn.classList.add('hidden');

    if (!editor) initEditor();
    else editor.commands.setContent(marked.parse(currentMarkdown));
  });

  function initEditor() {
    editor = new Editor({
      element: document.querySelector('#editor-container'),
      extensions: [
        StarterKit,
        Table.configure({ resizable: true }),
        TableRow,
        TableHeader,
        TableCell,
        MathInline,
        MathBlock,
        Placeholder.configure({ placeholder: 'B·∫Øt ƒë·∫ßu vi·∫øt...' })
      ],
      content: marked.parse(currentMarkdown),
      onUpdate: ({ editor }) => {
        currentMarkdown = htmlToMarkdown(editor.getHTML());
      }
    });

    // Toolbar
    document.querySelectorAll('.editor-toolbar button').forEach(btn => {
      btn.addEventListener('click', () => {
        const cmd = btn.dataset.cmd;
        const focus = () => editor.chain().focus();

        if (cmd === 'undo') focus().undo().run();
        if (cmd === 'redo') focus().redo().run();
        if (cmd === 'bold') focus().toggleBold().run();
        if (cmd === 'italic') focus().toggleItalic().run();
        if (cmd === 'h1') focus().toggleHeading({ level: 1 }).run();
        if (cmd === 'h2') focus().toggleHeading({ level: 2 }).run();
        if (cmd === 'bullet') focus().toggleBulletList().run();
        if (cmd === 'ordered') focus().toggleOrderedList().run();
        if (cmd === 'code') focus().toggleCodeBlock().run();
        if (cmd === 'table') editor.chain().focus().insertTable({ rows: 3, cols: 3, withHeaderRow: true }).run();
        if (cmd === 'math-inline') {
          const tex = prompt('Nh·∫≠p LaTeX (inline):', 'E = mc^2');
          if (tex) editor.chain().focus().insertContent(`<math-inline data-tex="${tex}"></math-inline>`).run();
        }
        if (cmd === 'math-block') {
          const tex = prompt('Nh·∫≠p LaTeX (block):', '\\sum_{i=1}^n i = \\frac{n(n+1)}{2}');
          if (tex) editor.chain().focus().insertContent(`<math-block data-tex="${tex}"></math-block>`).run();
        }
        if (cmd === 'link') {
          const url = prompt('URL:');
          if (url) focus().setLink({ href: url }).run();
        }
        if (cmd === 'image') {
          const url = prompt('URL h√¨nh ·∫£nh:');
          if (url) focus().setImage({ src: url }).run();
        }
      });
    });
  }

  // === HTML ‚Üí Markdown (c·∫£i ti·∫øn) ===
  function htmlToMarkdown(html) {
    const div = document.createElement('div');
    div.innerHTML = html;

    // Table
    const tables = div.querySelectorAll('table');
    tables.forEach(table => {
      let md = '|';
      const headers = table.querySelectorAll('th');
      const rows = table.querySelectorAll('tr');
      const colCount = headers.length || rows[0]?.children.length || 0;

      // Header
      for (let i = 0; i < colCount; i++) md += ` ${headers[i]?.innerText || ''} |`;
      md += '\n|';
      for (let i = 0; i < colCount; i++) md += ' --- |';
      md += '\n';

      // Rows
      rows.forEach(row => {
        if (row.querySelector('th')) return;
        md += '|';
        for (let cell of row.cells) {
          md += ` ${cell.innerText} |`;
        }
        md += '\n';
      });
      table.outerHTML = md;
    });

    // Math
    div.querySelectorAll('math-inline').forEach(el => {
      el.outerHTML = `$${el.dataset.tex}$`;
    });
    div.querySelectorAll('math-block').forEach(el => {
      el.outerHTML = `$$${el.dataset.tex}$$`;
    });

    // Other
    return div.innerHTML
      .replace(/<strong>(.*?)<\/strong>/g, '**$1**')
      .replace(/<em>(.*?)<\/em>/g, '*$1*')
      .replace(/<h1>(.*?)<\/h1>/g, '# $1\n\n')
      .replace(/<h2>(.*?)<\/h2>/g, '## $1\n\n')
      .replace(/<h3>(.*?)<\/h3>/g, '### $1\n\n')
      .replace(/<ul>/g, '').replace(/<\/ul>/g, '\n')
      .replace(/<li>(.*?)<\/li>/g, '- $1\n')
      .replace(/<ol>/g, '').replace(/<\/ol>/g, '\n')
      .replace(/<li>(.*?)<\/li>/g, '1. $1\n')
      .replace(/<code>(.*?)<\/code>/g, '`$1`')
      .replace(/<pre><code>(.*?)<\/code><\/pre>/gs, '```\n$1\n```')
      .replace(/<a href="(.*?)">(.*?)<\/a>/g, '[$2]($1)')
      .replace(/<img src="(.*?)" alt="(.*?)".*?>/g, '![$2]($1)')
      .replace(/<p>(.*?)<\/p>/g, '$1\n\n')
      .replace(/<br>/g, '\n')
      .replace(/\n{3,}/g, '\n\n')
      .trim();
  }

  // === Save .md ===
  saveBtn.addEventListener('click', () => {
    const blob = new Blob([currentMarkdown], { type: 'text/markdown' });
    const a = document.createElement('a');
    a.href = URL.createObjectURL(blob);
    a.download = 'edited-document.md';
    a.click();
    URL.revokeObjectURL(a.href);
  });

  // === Export PDF ===
  exportPdfBtn.addEventListener('click', () => {
    html2pdf().set({
      margin: 12,
      filename: 'document.pdf',
      image: { type: 'jpeg', quality: 0.98 },
      html2canvas: { scale: 2 },
      jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' }
    }).from(document.querySelector('.container')).save();
  });

  // === Back ===
  backBtn.addEventListener('click', () => {
    renderMarkdown();
    editorModal.classList.add('hidden');
    content.classList.remove('hidden');
    saveBtn.classList.add('hidden');
    backBtn.classList.add('hidden');
    editBtn.classList.remove('hidden');
    exportPdfBtn.classList.remove('hidden');
  });
</script>

</body>
</html>
